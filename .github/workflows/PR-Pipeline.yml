# This is a basic workflow to help you get started with Actions

name: VALIDATE_PULL_REQUEST

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  VALIDATE_DELTA_PR:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: jfgarcia268/vlocity_sfdx:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      # Checkout from GIT.
      - name: Checkout from GIT. We checkout both HEAD and BASE branches to generate DELTA
        run: |
          export HOME=/root
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git checkout ${{ github.BASE_REF }}
          git checkout ${{ github.HEAD_REF }}

      # Run SFDX GIT and create delta
      - name: Run sfdx git delta and create delta
        run: |
          export HOME=/root
          mkdir force-app-delta
          sfdx sgd:source:delta --to ${{ github.HEAD_REF }} --from $(git merge-base ${{ github.HEAD_REF }} ${{ github.BASE_REF }}) -s force-app --generate-delta --output ./force-app-delta/
      - name: Show package to deploy
        run: |
          cat force-app-delta/package/package.xml
      - name: Show package to destroy
        run: |
          cat force-app-delta/destructiveChanges/destructiveChanges.xml

      #Authentication to Target org
      - name: Authenticate Target Org
        run: |
          export HOME=/root 
          echo ${{ secrets.DEMO_QA }} > token.txt         
          sfdx force:auth:sfdxurl:store -f token.txt -a QA -s

      # Delta Validation to target Org. 
      - name: Delta Validation to target Org.
        run: |
          export HOME=/root
          if [ $(cat force-app-delta/package/package.xml | wc -l) -gt 4 ];then
            if [ $(egrep 'name>ApexClass|name>Apextrigger|name>Flow' force-app-delta/package/package.xml | wc -l) -gt 1 ];then
              echo "Deploying Delta and not running Apex tests"
              sfdx force:source:deploy --ignorewarnings --manifest "./force-app-delta/package/package.xml" -l NoTestRun -w 100 --checkonly -u QA
            else 
              echo "Deploying Delta and Runing all Local Tests since this changes introduces updates in Apex Classes and Flows"
              #sfdx force:source:deploy --ignorewarnings --manifest "./force-app-delta/package/package.xml" -l RunLocalTests -w 100 --checkonly -u QA
              sfdx force:source:deploy --ignorewarnings --manifest "./force-app-delta/package/package.xml" -l NoTestRun -w 100 --checkonly -u QA
            fi
            if [ $? -ne 0 ]; then
              echo "SF - deployment Failed"
              exit 1
            fi   
          else
                echo "No SF changes found. Deployment skipped"
          fi

      # Delta Validation to target Org
      - name: Delta Validation to target Org + Destructive changes without running test classes.
        continue-on-error: true
        run: |
          export HOME=/root
          if grep -q '<types>' ./force-app-delta/destructiveChanges/destructiveChanges.xml ; then
             echo "Removing the below components: \n `cat force-app-delta/destructiveChanges/destructiveChanges.xml`"
             sfdx force:source:deploy --ignorewarnings --manifest  "./force-app-delta/package/package.xml" --postdestructivechanges "./force-app-delta/destructiveChanges/destructiveChanges.xml" -l NoTestRun -w 100 -c -u QA
          else
             echo "No destructive changes found"
          fi
